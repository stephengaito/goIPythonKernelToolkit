// Code generated by "esc -o rubyCode.go -pkg goIPyRubyAdaptor lib/IPyRubyData.rb"; DO NOT EDIT.

package goIPyRubyAdaptor

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	"path"
	"sync"
	"time"
)

type _escLocalFS struct{}

var _escLocal _escLocalFS

type _escStaticFS struct{}

var _escStatic _escStaticFS

type _escDirectory struct {
	fs   http.FileSystem
	name string
}

type _escFile struct {
	compressed string
	size       int64
	modtime    int64
	local      string
	isDir      bool

	once sync.Once
	data []byte
	name string
}

func (_escLocalFS) Open(name string) (http.File, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	return os.Open(f.local)
}

func (_escStaticFS) prepare(name string) (*_escFile, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	var err error
	f.once.Do(func() {
		f.name = path.Base(name)
		if f.size == 0 {
			return
		}
		var gr *gzip.Reader
		b64 := base64.NewDecoder(base64.StdEncoding, bytes.NewBufferString(f.compressed))
		gr, err = gzip.NewReader(b64)
		if err != nil {
			return
		}
		f.data, err = ioutil.ReadAll(gr)
	})
	if err != nil {
		return nil, err
	}
	return f, nil
}

func (fs _escStaticFS) Open(name string) (http.File, error) {
	f, err := fs.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.File()
}

func (dir _escDirectory) Open(name string) (http.File, error) {
	return dir.fs.Open(dir.name + name)
}

func (f *_escFile) File() (http.File, error) {
	type httpFile struct {
		*bytes.Reader
		*_escFile
	}
	return &httpFile{
		Reader:   bytes.NewReader(f.data),
		_escFile: f,
	}, nil
}

func (f *_escFile) Close() error {
	return nil
}

func (f *_escFile) Readdir(count int) ([]os.FileInfo, error) {
	if !f.isDir {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is not directory", f.name)
	}

	fis, ok := _escDirs[f.local]
	if !ok {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is directory, but we have no info about content of this dir, local=%s", f.name, f.local)
	}
	limit := count
	if count <= 0 || limit > len(fis) {
		limit = len(fis)
	}

	if len(fis) == 0 && count > 0 {
		return nil, io.EOF
	}

	return fis[0:limit], nil
}

func (f *_escFile) Stat() (os.FileInfo, error) {
	return f, nil
}

func (f *_escFile) Name() string {
	return f.name
}

func (f *_escFile) Size() int64 {
	return f.size
}

func (f *_escFile) Mode() os.FileMode {
	return 0
}

func (f *_escFile) ModTime() time.Time {
	return time.Unix(f.modtime, 0)
}

func (f *_escFile) IsDir() bool {
	return f.isDir
}

func (f *_escFile) Sys() interface{} {
	return f
}

// FS returns a http.Filesystem for the embedded assets. If useLocal is true,
// the filesystem's contents are instead used.
func FS(useLocal bool) http.FileSystem {
	if useLocal {
		return _escLocal
	}
	return _escStatic
}

// Dir returns a http.Filesystem for the embedded assets on a given prefix dir.
// If useLocal is true, the filesystem's contents are instead used.
func Dir(useLocal bool, name string) http.FileSystem {
	if useLocal {
		return _escDirectory{fs: _escLocal, name: name}
	}
	return _escDirectory{fs: _escStatic, name: name}
}

// FSByte returns the named file from the embedded assets. If useLocal is
// true, the filesystem's contents are instead used.
func FSByte(useLocal bool, name string) ([]byte, error) {
	if useLocal {
		f, err := _escLocal.Open(name)
		if err != nil {
			return nil, err
		}
		b, err := ioutil.ReadAll(f)
		_ = f.Close()
		return b, err
	}
	f, err := _escStatic.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.data, nil
}

// FSMustByte is the same as FSByte, but panics if name is not present.
func FSMustByte(useLocal bool, name string) []byte {
	b, err := FSByte(useLocal, name)
	if err != nil {
		panic(err)
	}
	return b
}

// FSString is the string version of FSByte.
func FSString(useLocal bool, name string) (string, error) {
	b, err := FSByte(useLocal, name)
	return string(b), err
}

// FSMustString is the string version of FSMustByte.
func FSMustString(useLocal bool, name string) string {
	return string(FSMustByte(useLocal, name))
}

var _escData = map[string]*_escFile{

	"/lib/IPyRubyData.rb": {
		name:    "IPyRubyData.rb",
		local:   "lib/IPyRubyData.rb",
		size:    7171,
		modtime: 1589978722,
		compressed: `
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
`,
	},
}

var _escDirs = map[string][]os.FileInfo{}
