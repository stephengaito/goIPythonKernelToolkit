// Code generated by "esc -o rubyCode.go -pkg goIPyRubyAdaptor lib/IPyRubyData.rb"; DO NOT EDIT.

package goIPyRubyAdaptor

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	"path"
	"sync"
	"time"
)

type _escLocalFS struct{}

var _escLocal _escLocalFS

type _escStaticFS struct{}

var _escStatic _escStaticFS

type _escDirectory struct {
	fs   http.FileSystem
	name string
}

type _escFile struct {
	compressed string
	size       int64
	modtime    int64
	local      string
	isDir      bool

	once sync.Once
	data []byte
	name string
}

func (_escLocalFS) Open(name string) (http.File, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	return os.Open(f.local)
}

func (_escStaticFS) prepare(name string) (*_escFile, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	var err error
	f.once.Do(func() {
		f.name = path.Base(name)
		if f.size == 0 {
			return
		}
		var gr *gzip.Reader
		b64 := base64.NewDecoder(base64.StdEncoding, bytes.NewBufferString(f.compressed))
		gr, err = gzip.NewReader(b64)
		if err != nil {
			return
		}
		f.data, err = ioutil.ReadAll(gr)
	})
	if err != nil {
		return nil, err
	}
	return f, nil
}

func (fs _escStaticFS) Open(name string) (http.File, error) {
	f, err := fs.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.File()
}

func (dir _escDirectory) Open(name string) (http.File, error) {
	return dir.fs.Open(dir.name + name)
}

func (f *_escFile) File() (http.File, error) {
	type httpFile struct {
		*bytes.Reader
		*_escFile
	}
	return &httpFile{
		Reader:   bytes.NewReader(f.data),
		_escFile: f,
	}, nil
}

func (f *_escFile) Close() error {
	return nil
}

func (f *_escFile) Readdir(count int) ([]os.FileInfo, error) {
	if !f.isDir {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is not directory", f.name)
	}

	fis, ok := _escDirs[f.local]
	if !ok {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is directory, but we have no info about content of this dir, local=%s", f.name, f.local)
	}
	limit := count
	if count <= 0 || limit > len(fis) {
		limit = len(fis)
	}

	if len(fis) == 0 && count > 0 {
		return nil, io.EOF
	}

	return fis[0:limit], nil
}

func (f *_escFile) Stat() (os.FileInfo, error) {
	return f, nil
}

func (f *_escFile) Name() string {
	return f.name
}

func (f *_escFile) Size() int64 {
	return f.size
}

func (f *_escFile) Mode() os.FileMode {
	return 0
}

func (f *_escFile) ModTime() time.Time {
	return time.Unix(f.modtime, 0)
}

func (f *_escFile) IsDir() bool {
	return f.isDir
}

func (f *_escFile) Sys() interface{} {
	return f
}

// FS returns a http.Filesystem for the embedded assets. If useLocal is true,
// the filesystem's contents are instead used.
func FS(useLocal bool) http.FileSystem {
	if useLocal {
		return _escLocal
	}
	return _escStatic
}

// Dir returns a http.Filesystem for the embedded assets on a given prefix dir.
// If useLocal is true, the filesystem's contents are instead used.
func Dir(useLocal bool, name string) http.FileSystem {
	if useLocal {
		return _escDirectory{fs: _escLocal, name: name}
	}
	return _escDirectory{fs: _escStatic, name: name}
}

// FSByte returns the named file from the embedded assets. If useLocal is
// true, the filesystem's contents are instead used.
func FSByte(useLocal bool, name string) ([]byte, error) {
	if useLocal {
		f, err := _escLocal.Open(name)
		if err != nil {
			return nil, err
		}
		b, err := ioutil.ReadAll(f)
		_ = f.Close()
		return b, err
	}
	f, err := _escStatic.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.data, nil
}

// FSMustByte is the same as FSByte, but panics if name is not present.
func FSMustByte(useLocal bool, name string) []byte {
	b, err := FSByte(useLocal, name)
	if err != nil {
		panic(err)
	}
	return b
}

// FSString is the string version of FSByte.
func FSString(useLocal bool, name string) (string, error) {
	b, err := FSByte(useLocal, name)
	return string(b), err
}

// FSMustString is the string version of FSMustByte.
func FSMustString(useLocal bool, name string) string {
	return string(FSMustByte(useLocal, name))
}

var _escData = map[string]*_escFile{

	"/lib/IPyRubyData.rb": {
		name:    "IPyRubyData.rb",
		local:   "lib/IPyRubyData.rb",
		size:    6343,
		modtime: 1589824529,
		compressed: `
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
`,
	},
}

var _escDirs = map[string][]os.FileInfo{}
