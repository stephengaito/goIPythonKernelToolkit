// Code generated by "esc -o rubyCode.go -pkg goIPyRubyAdaptor lib/IPyRubyData.rb"; DO NOT EDIT.

package goIPyRubyAdaptor

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	"path"
	"sync"
	"time"
)

type _escLocalFS struct{}

var _escLocal _escLocalFS

type _escStaticFS struct{}

var _escStatic _escStaticFS

type _escDirectory struct {
	fs   http.FileSystem
	name string
}

type _escFile struct {
	compressed string
	size       int64
	modtime    int64
	local      string
	isDir      bool

	once sync.Once
	data []byte
	name string
}

func (_escLocalFS) Open(name string) (http.File, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	return os.Open(f.local)
}

func (_escStaticFS) prepare(name string) (*_escFile, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	var err error
	f.once.Do(func() {
		f.name = path.Base(name)
		if f.size == 0 {
			return
		}
		var gr *gzip.Reader
		b64 := base64.NewDecoder(base64.StdEncoding, bytes.NewBufferString(f.compressed))
		gr, err = gzip.NewReader(b64)
		if err != nil {
			return
		}
		f.data, err = ioutil.ReadAll(gr)
	})
	if err != nil {
		return nil, err
	}
	return f, nil
}

func (fs _escStaticFS) Open(name string) (http.File, error) {
	f, err := fs.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.File()
}

func (dir _escDirectory) Open(name string) (http.File, error) {
	return dir.fs.Open(dir.name + name)
}

func (f *_escFile) File() (http.File, error) {
	type httpFile struct {
		*bytes.Reader
		*_escFile
	}
	return &httpFile{
		Reader:   bytes.NewReader(f.data),
		_escFile: f,
	}, nil
}

func (f *_escFile) Close() error {
	return nil
}

func (f *_escFile) Readdir(count int) ([]os.FileInfo, error) {
	if !f.isDir {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is not directory", f.name)
	}

	fis, ok := _escDirs[f.local]
	if !ok {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is directory, but we have no info about content of this dir, local=%s", f.name, f.local)
	}
	limit := count
	if count <= 0 || limit > len(fis) {
		limit = len(fis)
	}

	if len(fis) == 0 && count > 0 {
		return nil, io.EOF
	}

	return fis[0:limit], nil
}

func (f *_escFile) Stat() (os.FileInfo, error) {
	return f, nil
}

func (f *_escFile) Name() string {
	return f.name
}

func (f *_escFile) Size() int64 {
	return f.size
}

func (f *_escFile) Mode() os.FileMode {
	return 0
}

func (f *_escFile) ModTime() time.Time {
	return time.Unix(f.modtime, 0)
}

func (f *_escFile) IsDir() bool {
	return f.isDir
}

func (f *_escFile) Sys() interface{} {
	return f
}

// FS returns a http.Filesystem for the embedded assets. If useLocal is true,
// the filesystem's contents are instead used.
func FS(useLocal bool) http.FileSystem {
	if useLocal {
		return _escLocal
	}
	return _escStatic
}

// Dir returns a http.Filesystem for the embedded assets on a given prefix dir.
// If useLocal is true, the filesystem's contents are instead used.
func Dir(useLocal bool, name string) http.FileSystem {
	if useLocal {
		return _escDirectory{fs: _escLocal, name: name}
	}
	return _escDirectory{fs: _escStatic, name: name}
}

// FSByte returns the named file from the embedded assets. If useLocal is
// true, the filesystem's contents are instead used.
func FSByte(useLocal bool, name string) ([]byte, error) {
	if useLocal {
		f, err := _escLocal.Open(name)
		if err != nil {
			return nil, err
		}
		b, err := ioutil.ReadAll(f)
		_ = f.Close()
		return b, err
	}
	f, err := _escStatic.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.data, nil
}

// FSMustByte is the same as FSByte, but panics if name is not present.
func FSMustByte(useLocal bool, name string) []byte {
	b, err := FSByte(useLocal, name)
	if err != nil {
		panic(err)
	}
	return b
}

// FSString is the string version of FSByte.
func FSString(useLocal bool, name string) (string, error) {
	b, err := FSByte(useLocal, name)
	return string(b), err
}

// FSMustString is the string version of FSMustByte.
func FSMustString(useLocal bool, name string) string {
	return string(FSMustByte(useLocal, name))
}

var _escData = map[string]*_escFile{

	"/lib/IPyRubyData.rb": {
		name:    "IPyRubyData.rb",
		local:   "lib/IPyRubyData.rb",
		size:    6204,
		modtime: 1589712169,
		compressed: `
H4sIAAAAAAAC/7xY3W/bOBJ/rv6KqVxskq2r4g6LfThc0Es3TuprLBtxLvdQBAEtjS0mFKklqTgG9o8/
DPVF2c5H93qXB0ckf/M9nCE5gKuMG9DlYgMm0bywwPNCYI7SGrAZwoTd4ymzDHK0mUqDQOPvJdcIB3dG
yYNuWBTeYMEM/vrLQRCQAISlEkKtuVwB0+jYhsYymTKdhhBOxpPR1aZAE8JSaRjPNjZTEkhqMAia1S9X
kwuo/o4htPhoP2Y2F2EL+Cd7YPPKhmMIWVEInjDLlfx4xx5YZZ2Hno3OO3Y8Zyv8eFfgykPMp3GH6PEz
Sna4C2bxsa+YoKkOMWH6PlVr6SHyeqoDzeJGn06hQnr6zE7PYL8+RbrsYPPrXT7mYfX+0ffVFT7aLWcW
gnEZBoO9IWM0wBTCnOdou1ih1kqDxkJpy+XKC9coZjm2ElCyHDvxo2smSmwXH2jkrV5pluCCJfdOuWbg
AeaW2dLU5MYNwh+Ra+PZ5rJcbAg0YcVX3Bg4hm/BGz8Hh92wyzh/cjY694fzaewNXbJ44yY1vKlZ7NPP
Ts+80fzaX6MoDoOb4L8MWd/qEa23pgP0Ajr0J1wQezNt4HqzVbScon1RJ0I0gnY9P4Qn9LqJloJZizII
UlzC2PRxh8zpdRQAaLSllrBkwiCUUqAxUK1G3NyyT4dfmMmeAtZ8onvS8APs1fwoEihXNoO/w186NlaX
GKBMt/SjHPtRytXAjJnbe9x8Ojwg5gevRk/QsvS7KK40k4ajtE+SPBGHb5VqN99N1ur4/aSdsj5tPyzU
1864cL3tkLYIpeoQllzgjFnnePr+TUnreuExjKeRRpYe+pCEGYSGOgBYZyjBrwQBFSmSRQMny+d6tE0y
Oz1rKWanZ68giDsRs3i/BBQGW9Aee3tYmfZ9RCXP0RiV4xebC8+jLb9efYQGGVl1a4767LqS2TLtpp5j
7dVa6FP5YgYQK0tVn1lwHd71P1hsLBpXFY1VGlNgpp7j0vAUgQHlEcytdiURDtcZTzL4OWHyZ+AyEWWK
IEshKrKjKBh0JjWRdWrNRudjkvnZ4XYNOpEple3DKiC9nkEzuzycedXiZ3eqilAmKsVffzl8AkxSt90+
n8b768+uo6lhAf1GK5SomcWGaoup62Wt5W70WoPrNkhT4bvwfUvv9I+M1bx4H74LO590q7vGNT20VaWZ
eM7MtvGCT7EvZSfMZj/AyqfNfMlOP6npEPg/zeam6pAys9Oz70pjd1ZpLGmIX8jfHuzoCaPj/8tGbuqn
Uyv+E9vYndxa++PXb+Jd7J49PL/u1Jtfnz+X3HRMhBq3L6W3mgC1WWJH9wB31zt2U7szUaHR2s0tl6bA
xEZJpvKiaccOUB1dKve/5LZWATci8uqrEbrrAp9FX/1hS+VJpQXg20ewxlr6391DqssEnbkiiWt/uTnB
9Jcb8XAMvUtVczbZOc9GdfZ9ajVvlKhl/zkHexFqPp9l0oK2Ge3Y+82368bjvxfcGHXjWdMHdge6pz3t
ndz6GC+iDtrlxW9KPqC2f3WxVZqv6g4XAAwApSk1QjsN4zkwCV46gFrcYWIJHYAHPO42ShgOYZtxrNaw
Vvoe1txm7pa5UjVXSJgQdAkyYBUklXpgM272yAXHjUurgFUsvqKWKGBXN7J9urijk2iDItBtjGvfbgDf
jiY+EbIkuy0Y15Aq+AMYBfcrbob1UR/+cFuvz/kkTdsdM13cDXeomhNjT2AX51cKHVS/0BACN8AgUUJg
YrmSoJaQMZNhSl/3uPngHgyAGBtIlNZoCiVTuvlaBTU3kr1vG/ZE/hvB8LwQG+ArqejWLDeQN3pUvYMb
kMp6adNxA6VprWbGnJZ7dPRl8uWeWx789NOzFaNx3BFlmgyqalWz2fExWlb5mL58P+8NcOP0vUGueVXd
y2PYtij6qxKg+V/9Dlxan1i3M3KVo3SfGsmb8RTwkeWFQPIVIUrTfnolwGX8h3vcNJsEVqrIUEvlDgEy
/ai0o2lecVKVlCTKvYrBGBImYcllGkURtErNp7BG+L3kFruwb0uNarhXdqaLu+3jr7HuUcLtEdR6CKj1
xKyOIBhAokqRkmF/o9G7t/BGMIvG1u8vORrDVkhL/4A3QlUveeQEt07zt/DGuOoMghkLdPeExQZWaA0t
R/BGcEmHmXyBuo/h0qKmLoAaghdKxzdP8yGEwrcqdPfnF4pC/bg3hHB0eTm9DF9FUj35ObltMm0RFQXK
tH1R6ohrJ79CSv0ySPLIovDomYjW22/0wMQh67oiKXqJphQWjmGBK17tvqvp7GJ0Pbq4/TyOT8fxeYRb
dBpNUna37n6uvHs7hHAvCzg7GV+MTsOusAbgia2V77W8TsPXyfWJd8UNYP5l+q+LU4inVzQFZQG0b992
rpNcOLf9JwAA//8WV6tlPBgAAA==
`,
	},
}

var _escDirs = map[string][]os.FileInfo{}
