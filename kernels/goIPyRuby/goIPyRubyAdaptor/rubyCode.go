// Code generated by "esc -o rubyCode.go -pkg goIPyRubyAdaptor lib/IPyRubyData.rb"; DO NOT EDIT.

package goIPyRubyAdaptor

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	"path"
	"sync"
	"time"
)

type _escLocalFS struct{}

var _escLocal _escLocalFS

type _escStaticFS struct{}

var _escStatic _escStaticFS

type _escDirectory struct {
	fs   http.FileSystem
	name string
}

type _escFile struct {
	compressed string
	size       int64
	modtime    int64
	local      string
	isDir      bool

	once sync.Once
	data []byte
	name string
}

func (_escLocalFS) Open(name string) (http.File, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	return os.Open(f.local)
}

func (_escStaticFS) prepare(name string) (*_escFile, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	var err error
	f.once.Do(func() {
		f.name = path.Base(name)
		if f.size == 0 {
			return
		}
		var gr *gzip.Reader
		b64 := base64.NewDecoder(base64.StdEncoding, bytes.NewBufferString(f.compressed))
		gr, err = gzip.NewReader(b64)
		if err != nil {
			return
		}
		f.data, err = ioutil.ReadAll(gr)
	})
	if err != nil {
		return nil, err
	}
	return f, nil
}

func (fs _escStaticFS) Open(name string) (http.File, error) {
	f, err := fs.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.File()
}

func (dir _escDirectory) Open(name string) (http.File, error) {
	return dir.fs.Open(dir.name + name)
}

func (f *_escFile) File() (http.File, error) {
	type httpFile struct {
		*bytes.Reader
		*_escFile
	}
	return &httpFile{
		Reader:   bytes.NewReader(f.data),
		_escFile: f,
	}, nil
}

func (f *_escFile) Close() error {
	return nil
}

func (f *_escFile) Readdir(count int) ([]os.FileInfo, error) {
	if !f.isDir {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is not directory", f.name)
	}

	fis, ok := _escDirs[f.local]
	if !ok {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is directory, but we have no info about content of this dir, local=%s", f.name, f.local)
	}
	limit := count
	if count <= 0 || limit > len(fis) {
		limit = len(fis)
	}

	if len(fis) == 0 && count > 0 {
		return nil, io.EOF
	}

	return fis[0:limit], nil
}

func (f *_escFile) Stat() (os.FileInfo, error) {
	return f, nil
}

func (f *_escFile) Name() string {
	return f.name
}

func (f *_escFile) Size() int64 {
	return f.size
}

func (f *_escFile) Mode() os.FileMode {
	return 0
}

func (f *_escFile) ModTime() time.Time {
	return time.Unix(f.modtime, 0)
}

func (f *_escFile) IsDir() bool {
	return f.isDir
}

func (f *_escFile) Sys() interface{} {
	return f
}

// FS returns a http.Filesystem for the embedded assets. If useLocal is true,
// the filesystem's contents are instead used.
func FS(useLocal bool) http.FileSystem {
	if useLocal {
		return _escLocal
	}
	return _escStatic
}

// Dir returns a http.Filesystem for the embedded assets on a given prefix dir.
// If useLocal is true, the filesystem's contents are instead used.
func Dir(useLocal bool, name string) http.FileSystem {
	if useLocal {
		return _escDirectory{fs: _escLocal, name: name}
	}
	return _escDirectory{fs: _escStatic, name: name}
}

// FSByte returns the named file from the embedded assets. If useLocal is
// true, the filesystem's contents are instead used.
func FSByte(useLocal bool, name string) ([]byte, error) {
	if useLocal {
		f, err := _escLocal.Open(name)
		if err != nil {
			return nil, err
		}
		b, err := ioutil.ReadAll(f)
		_ = f.Close()
		return b, err
	}
	f, err := _escStatic.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.data, nil
}

// FSMustByte is the same as FSByte, but panics if name is not present.
func FSMustByte(useLocal bool, name string) []byte {
	b, err := FSByte(useLocal, name)
	if err != nil {
		panic(err)
	}
	return b
}

// FSString is the string version of FSByte.
func FSString(useLocal bool, name string) (string, error) {
	b, err := FSByte(useLocal, name)
	return string(b), err
}

// FSMustString is the string version of FSMustByte.
func FSMustString(useLocal bool, name string) string {
	return string(FSMustByte(useLocal, name))
}

var _escData = map[string]*_escFile{

	"/lib/IPyRubyData.rb": {
		name:    "IPyRubyData.rb",
		local:   "lib/IPyRubyData.rb",
		size:    7189,
		modtime: 1589876353,
		compressed: `
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
`,
	},
}

var _escDirs = map[string][]os.FileInfo{}
